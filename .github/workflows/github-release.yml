name: Release to GihHub

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  actions: read
  contents: write
  deployments: write
  issues: write

jobs:
  release:
    name: Release to GihHub
    runs-on: windows-latest
    env:
      version: "${{ github.ref_name }}"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "8"
          check-latest: true

      - name: Install required PowerShell and NuGet modules
        uses: IT-Service/Invoke-PSDepend@v1
        with:
          recurse: true

      - name: Generate release notes
        id: generate_release_notes
        uses: IT-Service/New-ReleaseNotesFromChangeLog@v1.1.0
        with:
          version: "${{ env.version }}"
          verbose: true

      - name: Build .ott and .odt files
        id: build
        uses: IT-Service/Invoke-Build@v1.0.0
        with:
          task: "BuildAssets"
          verbose: false

      - name: Search GitHub Milestone
        id: milestone_search
        shell: powershell
        run: |
          Import-Module -Name PowerShellForGitHub | Out-Null;
          Write-Verbose 'Configure PowerShellForGitHub...';
          $GitHubToken = ( ConvertTo-SecureString -String '${{ github.token }}' -AsPlainText -Force );
          Set-GitHubAuthentication -Credential ( New-Object System.Management.Automation.PSCredential 'username is ignored', $GitHubToken ) -SessionOnly;
          Set-GitHubConfiguration -DefaultOwnerName '${{ github.repository_owner }}' -DefaultRepositoryName '${{ github.event.repository.name }}' -SessionOnly;
          $Version = '${{ env.version }}';
          $milestones = Get-GitHubMilestone `
            -OwnerName '${{ github.repository_owner }}' -RepositoryName '${{ github.event.repository.name }}' `
            -State All;
          $currentMilestone = $milestones | Where-Object -Property title -EQ $Version;
          if ( $currentMilestone ) {
            echo "::set-output name=exists::${{ true }}";
            echo "::set-output name=url::$( $currentMilestone.html_url )";
            echo "::set-output name=title::$( $currentMilestone.title )";
            echo "::set-output name=number::$( $currentMilestone.MilestoneNumber )";
          } else {
            echo "::set-output name=exists::${{ false }}";
          };

      - name: Create GitHub Release
        id: release
        shell: powershell
        run: |
          Import-Module -Name PowerShellForGitHub | Out-Null;
          Write-Verbose 'Configure PowerShellForGitHub...';
          $GitHubToken = ( ConvertTo-SecureString -String '${{ github.token }}' -AsPlainText -Force );
          Set-GitHubAuthentication -Credential ( New-Object System.Management.Automation.PSCredential 'username is ignored', $GitHubToken ) -SessionOnly;
          Set-GitHubConfiguration -DefaultOwnerName '${{ github.repository_owner }}' -DefaultRepositoryName '${{ github.event.repository.name }}' -SessionOnly;
          $Version = '${{ env.version }}';
          $releaseNotes = ( Get-Content -Path '${{ steps.generate_release_notes.outputs.release-notes-path }}' -Encoding UTF8 -Raw );
          if ( $${{ steps.milestone_search.outputs.exists == 'true' }} ) {
            $releaseDescription = `
              "[![${{ steps.milestone_search.outputs.title }}](https://img.shields.io/badge/milestone-${{ steps.milestone_search.outputs.title }}-blue?style=plastic&logo=github)](${{ steps.milestone_search.outputs.url }})" +
              "`r`n`r`n" + $releaseNotes;
          } else {
            $releaseDescription = $releaseNotes;
          };
          $release = Get-GitHubRelease `
            -Tag $Version `
            -ErrorAction SilentlyContinue;
          if ( $release ) {
            Remove-GitHubRelease -Release ( $release.ID ) -Force;
          };
          $release = New-GitHubRelease `
            -Tag $Version `
            -Name $Version `
            -Body $releaseDescription `
            -Committish '${{ github.sha }}' `
            -Verbose;
          echo "::set-output name=url::$( $release.html_url )";
          echo "::set-output name=tag_name::$( $release.tag_name )";
          Write-Verbose 'Adding produced files...';
          $assetsContainerPath = 'tmp/templatesAndDocs.zip';
          $asset = New-GitHubReleaseAsset -Release ( $release.ID ) -Path $assetsContainerPath -Verbose;

      - name: Close GitHub Milestone
        if: steps.milestone_search.outputs.exists == 'true'
        shell: powershell
        run: |
          Import-Module -Name PowerShellForGitHub | Out-Null;
          Write-Verbose 'Configure PowerShellForGitHub...';
          $GitHubToken = ( ConvertTo-SecureString -String '${{ github.token }}' -AsPlainText -Force );
          Set-GitHubAuthentication -Credential ( New-Object System.Management.Automation.PSCredential 'username is ignored', $GitHubToken ) -SessionOnly;
          Set-GitHubConfiguration -DefaultOwnerName '${{ github.repository_owner }}' -DefaultRepositoryName '${{ github.event.repository.name }}' -SessionOnly;
          $Version = '${{ env.version }}';
          $releaseNotes = ( Get-Content -Path '${{ steps.generate_release_notes.outputs.releaseNotesPath }}' -Encoding UTF8 -Raw );
          $releaseDescription = `
            "[![${{ steps.release.outputs.tag_name }}](https://img.shields.io/badge/release-${{ steps.release.outputs.tag_name }}-blue?style=plastic&logo=github)](${{ steps.release.outputs.url }})" +
            "`r`n`r`n" + $releaseNotes;
          Set-GitHubMilestone `
            -OwnerName '${{ github.repository_owner }}' -RepositoryName '${{ github.event.repository.name }}' `
            -Milestone ${{ steps.milestone_search.outputs.number }} `
            -Title $Version `
            -State Closed `
            -Description $releaseDescription `
            -DueOn ( Get-Date ) `
            -Verbose;
