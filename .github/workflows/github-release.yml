name: Release to GihHub

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  actions: read
  contents: write
  deployments: write
  issues: write

jobs:
  release:
    name: Release to GihHub
    runs-on: windows-latest
    env:
      version: "${{ github.ref_name }}"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.0.0
        with:
          fetch-depth: 0

      - uses: actions/setup-java@v3.0.0
        with:
          distribution: "adopt"
          java-version: "11"
          cache: "maven"

      - name: NuGet packages cache
        uses: actions/cache@v3.0.0
        id: nuget-packages-cache
        with:
          path: |
            **/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.config') }}

      - name: Restore NuGet packages for XSLT processing
        if: steps.nuget-packages-cache.outputs.cache-hit != 'true'
        run: nuget.exe restore "tools/xslt/packages.config" -PackagesDirectory "tools/xslt/packages" -Source "https://api.nuget.org/v3/index.json" -NonInteractive -UseLockFile -LockedMode

      - name: Restore NuGet packages for QRCodes processing
        if: steps.nuget-packages-cache.outputs.cache-hit != 'true'
        run: nuget.exe restore "tools/QRCode/packages.config" -PackagesDirectory "tools/QRCode/packages" -Source "https://api.nuget.org/v3/index.json" -NonInteractive -UseLockFile -LockedMode

      - name: Restore NuGet packages for Images processing
        if: steps.nuget-packages-cache.outputs.cache-hit != 'true'
        run: nuget.exe restore "tools/Images/packages.config" -PackagesDirectory "tools/Images/packages" -Source "https://api.nuget.org/v3/index.json" -NonInteractive -UseLockFile -LockedMode

      - name: Restore GitVersion NuGet package
        if: steps.nuget-packages-cache.outputs.cache-hit != 'true'
        run: nuget.exe restore "tools/GitVersion/packages.config" -PackagesDirectory "tools/GitVersion/packages" -Source "https://api.nuget.org/v3/index.json" -NonInteractive -UseLockFile -LockedMode

      - name: Install dependencies
        uses: IT-Service/Invoke-PSDepend@v1.0.1
        with:
          recurse: true

      - name: Install required PowerShell and NuGet modules
        uses: IT-Service/Invoke-PSDepend@v1.0.1
        with:
          recurse: true

      - name: Generate release notes
        id: generate_release_notes
        uses: IT-Service/New-ReleaseNotesFromChangeLog@v1.2.1
        with:
          version: "${{ env.version }}"
          verbose: true

      - name: Build .ott and .odt files
        id: build
        uses: IT-Service/Invoke-Build@v1.0.0
        with:
          task: "BuildAssets"
          verbose: false

      - name: Search GitHub Milestone
        id: milestone_search
        uses: octokit/graphql-action@v2.x
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          query: |
            query GetGitHubMilestoneForVersion($owner:String!, $repo:String!, $title:String!) {
              repository(owner:$owner, name:$repo) {
                milestones(query:$title, first: 1) {
                  nodes {
                    title
                    url
                    number
                    id
                  }
                }
              }
            }
          owner: ${{ github.event.repository.owner.name }}
          repo: ${{ github.event.repository.name }}
          title: "${{ env.version }}"

      - name: Create GitHub Release
        id: release
        shell: powershell
        run: |
          Import-Module -Name PowerShellForGitHub | Out-Null;
          Write-Verbose 'Configure PowerShellForGitHub...';
          $GitHubToken = ( ConvertTo-SecureString -String '${{ github.token }}' -AsPlainText -Force );
          Set-GitHubAuthentication -Credential ( New-Object System.Management.Automation.PSCredential 'username is ignored', $GitHubToken ) -SessionOnly;
          Set-GitHubConfiguration -DefaultOwnerName '${{ github.repository_owner }}' -DefaultRepositoryName '${{ github.event.repository.name }}' -SessionOnly;
          $Version = '${{ env.version }}';
          $releaseNotes = ( Get-Content -Path '${{ steps.generate_release_notes.outputs.release-notes-path }}' -Encoding UTF8 -Raw );
          if ( $${{ fromJSON(steps.milestone_search.outputs.data).repository.milestones.nodes[0] != null }} ) {
            $milestoneTitle = '${{ fromJSON(steps.milestone_search.outputs.data).repository.milestones.nodes[0].title }}';
            $milestoneUri = '${{ fromJSON(steps.milestone_search.outputs.data).repository.milestones.nodes[0].url }}';
            $releaseDescription = `
              "[![$milestoneTitle](https://img.shields.io/badge/milestone-$milestoneTitle-blue?style=plastic&logo=github)]($milestoneUri)" +
              "`r`n`r`n" + $releaseNotes;
          } else {
            $releaseDescription = $releaseNotes;
          };
          $release = Get-GitHubRelease `
            -Tag $Version `
            -ErrorAction SilentlyContinue;
          if ( $release ) {
            Remove-GitHubRelease -Release ( $release.ID ) -Force;
          };
          $release = New-GitHubRelease `
            -Tag $Version `
            -Name $Version `
            -Body $releaseDescription `
            -Committish '${{ github.sha }}' `
            -Verbose;
          echo "::set-output name=url::$( $release.html_url )";
          echo "::set-output name=tag_name::$( $release.tag_name )";
          Write-Verbose 'Adding produced files...';
          $assetsContainerPath = 'tmp/templatesAndDocs.zip';
          $asset = New-GitHubReleaseAsset -Release ( $release.ID ) -Path $assetsContainerPath -Verbose;

      - name: Close GitHub Milestone
        if: fromJSON(steps.milestone_search.outputs.data).repository.milestones.nodes[0] != null
        shell: powershell
        run: |
          Import-Module -Name PowerShellForGitHub | Out-Null;
          Write-Verbose 'Configure PowerShellForGitHub...';
          $GitHubToken = ( ConvertTo-SecureString -String '${{ github.token }}' -AsPlainText -Force );
          Set-GitHubAuthentication -Credential ( New-Object System.Management.Automation.PSCredential 'username is ignored', $GitHubToken ) -SessionOnly;
          Set-GitHubConfiguration -DefaultOwnerName '${{ github.repository_owner }}' -DefaultRepositoryName '${{ github.event.repository.name }}' -SessionOnly;
          $Version = '${{ env.version }}';
          $milestoneNumber = ${{ fromJSON(steps.milestone_search.outputs.data).repository.milestones.nodes[0].number }};
          $releaseNotes = ( Get-Content -Path '${{ steps.generate_release_notes.outputs.release-notes-path }}' -Encoding UTF8 -Raw );
          $releaseDescription = `
            "[![${{ steps.release.outputs.tag_name }}](https://img.shields.io/badge/release-${{ steps.release.outputs.tag_name }}-blue?style=plastic&logo=github)](${{ steps.release.outputs.url }})" +
            "`r`n`r`n" + $releaseNotes;
          Set-GitHubMilestone `
            -OwnerName '${{ github.repository_owner }}' -RepositoryName '${{ github.event.repository.name }}' `
            -Milestone $milestoneNumber `
            -Title $Version `
            -State Closed `
            -Description $releaseDescription `
            -DueOn ( Get-Date ) `
            -Verbose;
