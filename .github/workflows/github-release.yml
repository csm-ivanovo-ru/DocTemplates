name: Release to GihHub

on:
  push:
    # branches:
    #   - master

    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  actions: read
  contents: write
  deployments: write
  issues: write

jobs:
  release:
    name: Release to GihHub
    # needs: []
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "8"
          check-latest: true

      - name: Install required PowerShell and NuGet modules
        shell: powershell
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted;
          Install-Module -Name InvokeBuild | Out-Null;
          Install-Module -Name 7Zip4Powershell | Out-Null;
          Install-Module -Name PowerShellForGitHub | Out-Null;
          Register-PackageSource -Name 'nuget.org' -Location 'https://api.nuget.org/v3/index.json' -ProviderName NuGet -Trusted -Force | Out-Null;
          Install-Package -Name 'Saxon-HE' -MinimumVersion '9.8' -MaximumVersion '9.8.999' -ProviderName NuGet | Out-Null;
          Install-Package -Name 'QRCoder' -ProviderName NuGet -SkipDependencies | Out-Null;

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.9
        with:
          versionSpec: "5.x"

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.9
        with:
          useConfigFile: true

      - name: Build .ott and .odt files
        shell: powershell
        run: |
          Import-Module -Name InvokeBuild | Out-Null;
          Invoke-Build -Task Build -Version '${{ steps.gitversion.outputs.semVer }}';

      - name: Create GitHub Release
        shell: powershell
        run: |
          Import-Module -Name PowerShellForGitHub | Out-Null;
          Write-Verbose 'Configure PowerShellForGitHub...';
          $GitHubToken = ( ConvertTo-SecureString -String '${{ github.token }}' -AsPlainText -Force );
          Set-GitHubAuthentication -Credential ( New-Object System.Management.Automation.PSCredential 'username is ignored', $GitHubToken ) -SessionOnly;
          Set-GitHubConfiguration -DefaultOwnerName '${{ github.repository_owner }}' -DefaultRepositoryName '${{ github.event.repository.name }}' -SessionOnly;
          Write-Verbose 'Generate release description...';
          $releaseDescription = ( Get-Content -Path './CHANGELOG.md' -Encoding UTF8 -Raw );
          Write-Verbose 'Create release description...';
          $release = New-GitHubRelease -Tag '${{ steps.gitversion.outputs.semVer }}' -Draft -Body $releaseDescription -Committish '${{ github.sha }}' -Verbose;
          Write-Verbose 'Adding produced files...';
          $assetsContainerPath = 'tmp/templatesAndDocs.zip';
          Compress-Archive -Path 'output' -DestinationPath $assetsContainerPath -Verbose;
          $asset = New-GitHubReleaseAsset -Release ( $release.ID ) -Path $assetsContainerPath -Verbose;
          # Get-ChildItem -Path 'output/template'-Recurse -Filter '*.ott' | ForEach-Object {
          #   $release | New-GitHubReleaseAsset -Path ( $_.FullName ) -ContentType 'application/vnd.oasis.opendocument.text-template' -Verbose;
          # };
          # Get-ChildItem -Path 'output/doc'-Recurse -Filter '*.odt' | ForEach-Object {
          #   $release | New-GitHubReleaseAsset -Path ( $_.FullName ) -ContentType 'application/vnd.oasis.opendocument.text' -Verbose;
          # };
